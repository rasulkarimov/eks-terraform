apiVersion: template.openshift.io/v1
KIND:     Template
metadata:
  name: blog
  annotations:
    openshift.io/display-name: Blog app
    description: simle flask app for publication blogs
    iconClass: icon-python
    tags: python
objects:
  
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
    labels:
      app: nginx
      app.kubernetes.io/component: nginx
      app.kubernetes.io/instance: nginx
    name: alpine
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: alpine:latest
      from:
        kind: DockerImage
        name: alpine:latest
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source

- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
    labels:
      app: flask
      app.kubernetes.io/component: flask
      app.kubernetes.io/instance: flask
    name: centos
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: centos:lates
      from:
        kind: DockerImage
        name: centos:latest
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source

- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
    labels:
      app: flask
      app.kubernetes.io/component: flask
      app.kubernetes.io/instance: flask
    name: flask
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: flask:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: flask_blog_on_postgres_openshift/app
      git:
        uri: https://github.com/rasulkarimov/python
      type: Git
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: centos:latest
      type: Docker
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: CAs_2RH6CDNjmggqs4E7
      type: GitHub
    - generic:
        secret: VQRlzHrx2PHEOeWeKbcW
      type: Generic
    - type: ConfigChange
    - imageChange:
      type: ImageChange
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
    labels:
      app: nginx
      app.kubernetes.io/component: nginx
      app.kubernetes.io/instance: nginx
    name: nginx
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: nginx:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: flask_blog_on_postgres_openshift/nginx
      git:
        uri: https://github.com/rasulkarimov/python
      type: Git
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: alpine:latest
      type: Docker
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: MD-KreF9jsuFgby22li4
      type: GitHub
    - generic:
        secret: Cu-qKxsMfWicuUGREp8L
      type: Generic
    - type: ConfigChange
    - imageChange:
      type: ImageChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
    labels:
      app: flask
      app.kubernetes.io/component: flask
      app.kubernetes.io/instance: flask
    name: flask
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      deploymentconfig: flask
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          deploymentconfig: flask
      spec:
        containers:
          imagePullPolicy: Always
          name: flask
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - flask
        from:
          kind: ImageStreamTag
          name: flask:latest
          namespace: blog
      type: ImageChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
    labels:
      app: nginx
      app.kubernetes.io/component: nginx
      app.kubernetes.io/instance: nginx
    name: nginx
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      deploymentconfig: nginx
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          deploymentconfig: nginx
      spec:
        containers:
          imagePullPolicy: Always
          name: nginx
          ports:
          - containerPort: 8090
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - nginx
        from:
          kind: ImageStreamTag
          name: nginx:latest
          namespace: blog
      type: ImageChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
    labels:
      app: postgres
      template: postgresql-ephemeral-template
    name: postgres
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: postgres
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: postgres
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: postgres
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: postgres
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: postgres
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
            procMount: Default
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgres-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: postgres-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:10
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
    labels:
      app: flask
      app.kubernetes.io/component: flask
      app.kubernetes.io/instance: flask
    name: flask
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: flask
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
    labels:
      app: nginx
      app.kubernetes.io/component: nginx
      app.kubernetes.io/instance: nginx
    name: nginx
  spec:
    ports:
    - name: 8090-tcp
      port: 8090
      protocol: TCP
      targetPort: 8090
    selector:
      deploymentconfig: nginx
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
    labels:
      app: postgres
      template: postgresql-ephemeral-template
    name: postgres
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: postgres
    sessionAffinity: None
    type: ClusterIP
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    labels:
      app: nginx
      app.kubernetes.io/component: nginx
      app.kubernetes.io/instance: nginx
    name: nginx
  spec:
    port:
      targetPort: 8090-tcp
    to:
      kind: Service
      name: nginx
      weight: 100
    wildcardPolicy: None
